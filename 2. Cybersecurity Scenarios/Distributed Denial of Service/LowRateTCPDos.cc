/*
 * LICENSE : GNU General Public License v3.0 (https://github.com/Saket-Upadhyay/ns3-cybersecurity-simulations/blob/master/LICENSE)
 * REPOSITORY : https://github.com/Saket-Upadhyay/ns3-cybersecurity-simulations
 * =================================================================================
 *
 * Modified from : https://github.com/samvid25/Low-Rate-TCP-DoS-Attack/pull/1
 *      - Added NetAnim Animation Support
 */

// The Topology contains 5 nodes as follows:
// 0 -> alice (sender)
// 1 -> eve (attacker)
// 2 -> switch (common switch between alice and eve)
// 3 -> switch (switch conneced to bob)
// 4 -> bob (receiver)
/*
   n1
      \ pp1 (100 Mbps, 2ms RTT)
       \
        \             -> pp1 (100 Mbps, 2ms RTT)
         \            |
          n2 ---- n3 ---- n4
         /    |
        /     -> pp2 (1.5 Mbps, 40ms RTT)
       /
      / pp1 (100 Mbps, 2ms RTT)
   n0

 ## NetAnimator Support
 This will create a LowRateTCPDoSAnim.xml . Which can be parsed in NetAnim. for graphical simulation of the attack.

*/

#include "ns3/mobility-module.h"
#include "ns3/nstime.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/ipv4-global-routing-helper.h"
#include "ns3/netanim-module.h"

#define TCP_SINK_PORT 9000
#define UDP_SINK_PORT 9001

//parameters to change
#define BULK_SEND_MAX_BYTES 2097152
#define ATTACKER_DoS_RATE "20480kb/s"
#define MAX_SIMULATION_TIME 30.0

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("TcpHighRateDoSAttack");

int main(int argc, char *argv[])
{
    CommandLine cmd;
    cmd.Parse(argc, argv);

    Time::SetResolution(Time::NS);
    LogComponentEnable("UdpEchoClientApplication", LOG_LEVEL_INFO);
    LogComponentEnable("UdpEchoServerApplication", LOG_LEVEL_INFO);

    NodeContainer nodes;
    nodes.Create(5);

    // Define the Point-To-Point Links (Helpers) and their Paramters
    PointToPointHelper pp1, pp2;
    pp1.SetDeviceAttribute("DataRate", StringValue("100Mbps"));
    pp1.SetChannelAttribute("Delay", StringValue("1ms"));

    pp2.SetDeviceAttribute("DataRate", StringValue("1.5Mbps"));
    pp2.SetChannelAttribute("Delay", StringValue("20ms"));

    // Install the Point-To-Point Connections between Nodes
    NetDeviceContainer d02, d12, d23, d34;
    d02 = pp1.Install(nodes.Get(0), nodes.Get(2));
    d12 = pp1.Install(nodes.Get(1), nodes.Get(2));
    d23 = pp2.Install(nodes.Get(2), nodes.Get(3));
    d34 = pp1.Install(nodes.Get(3), nodes.Get(4));

    InternetStackHelper stack;
    stack.Install(nodes);

    Ipv4AddressHelper a02, a12, a23, a34;
    a02.SetBase("10.1.1.0", "255.255.255.0");
    a12.SetBase("10.1.2.0", "255.255.255.0");
    a23.SetBase("10.1.3.0", "255.255.255.0");
    a34.SetBase("10.1.4.0", "255.255.255.0");

    Ipv4InterfaceContainer i02, i12, i23, i34;
    i02 = a02.Assign(d02);
    i12 = a12.Assign(d12);
    i23 = a23.Assign(d23);
    i34 = a34.Assign(d34);

    // Attacker application
    OnOffHelper onoff("ns3::UdpSocketFactory", Address(InetSocketAddress(i34.GetAddress(1), UDP_SINK_PORT)));
    onoff.SetConstantRate(DataRate(ATTACKER_DoS_RATE));
    onoff.SetAttribute("OnTime", StringValue("ns3::ConstantRandomVariable[Constant=30]"));
    onoff.SetAttribute("OffTime", StringValue("ns3::ConstantRandomVariable[Constant=0]"));
    ApplicationContainer onOffApp = onoff.Install(nodes.Get(1));
    onOffApp.Start(Seconds(0.0));
    onOffApp.Stop(Seconds(MAX_SIMULATION_TIME));

    // Sender Application (Packets generated by this application are throttled)
    BulkSendHelper bulkSend("ns3::TcpSocketFactory", InetSocketAddress(i34.GetAddress(1), TCP_SINK_PORT));
    bulkSend.SetAttribute("MaxBytes", UintegerValue(BULK_SEND_MAX_BYTES));
    ApplicationContainer bulkSendApp = bulkSend.Install(nodes.Get(0));
    bulkSendApp.Start(Seconds(0.0));
    bulkSendApp.Stop(Seconds(MAX_SIMULATION_TIME - 10));

    // UDPSink on receiver side (Only for analysis purpose)
    PacketSinkHelper UDPsink("ns3::UdpSocketFactory",
                             Address(InetSocketAddress(Ipv4Address::GetAny(), UDP_SINK_PORT)));
    ApplicationContainer UDPSinkApp = UDPsink.Install(nodes.Get(4));
    UDPSinkApp.Start(Seconds(0.0));
    UDPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));

    // TCP Sink Application on receviver side
    PacketSinkHelper TCPsink("ns3::TcpSocketFactory",
                             InetSocketAddress(Ipv4Address::GetAny(), TCP_SINK_PORT));
    ApplicationContainer TCPSinkApp = TCPsink.Install(nodes.Get(4));
    TCPSinkApp.Start(Seconds(0.0));
    TCPSinkApp.Stop(Seconds(MAX_SIMULATION_TIME));

    Ipv4GlobalRoutingHelper::PopulateRoutingTables();

    // pp1.EnablePcapAll("PCAPs/tcplow");

    //Simulation NetAnim
    MobilityHelper mobility;

    mobility.SetPositionAllocator("ns3::GridPositionAllocator",
                                  "MinX", DoubleValue(0.0), "MinY", DoubleValue(0.0), "DeltaX", DoubleValue(5.0), "DeltaY", DoubleValue(10.0),
                                  "GridWidth", UintegerValue(5), "LayoutType", StringValue("RowFirst"));

    mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");

    mobility.Install(nodes);

    AnimationInterface anim("LowRateDDoSTcp.xml");

    ns3::AnimationInterface::SetConstantPosition(nodes.Get(0), 0, 0);
    ns3::AnimationInterface::SetConstantPosition(nodes.Get(1), 0, 20);
    ns3::AnimationInterface::SetConstantPosition(nodes.Get(2), 10, 10);
    ns3::AnimationInterface::SetConstantPosition(nodes.Get(3), 15, 10);
    ns3::AnimationInterface::SetConstantPosition(nodes.Get(4), 20, 10);

    Simulator::Run();
    Simulator::Destroy();
    return 0;
}